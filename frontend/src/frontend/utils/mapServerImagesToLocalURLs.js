/**
 * Maps local image paths to their corresponding server URLs.
 *
 * @param {Object} options - The options object.
 * @param {string} options.serverBasePath - The base path of the server where images are hosted.
 * @param {Object<string, string>} options.images - The object containing local image paths.
 * @returns {Object<string, string>} - The object containing mapped server URLs for the images.
 *
 * This function takes a base path for the server and an object of local image paths,
 * and returns an object where each local image path is mapped to its corresponding
 * server URL. The server URLs are generated by concatenating the server base path
 * with the local image path and appending a `.webp` extension.
 *
 * @throws {Error} If serverBasePath is not a string.
 * @throws {Error} If images is not an object.
 *
 * @example
 * // Local image paths
 * const images = {
 *     "image1": "path/to/image1",
 *     "image2": "path/to/image2"
 * };
 *
 * // Server base path
 * const serverBasePath = "https://example.com/assets";
 *
 * // Usage
 * const mappedURLs = mapServerImagesToLocalURLs({ serverBasePath, images });
 * // Result: {
 * //   "https://example.com/assets/image1.webp": "path/to/image1",
 * //   "https://example.com/assets/image2.webp": "path/to/image2"
 * // }
 */
export const mapServerImagesToLocalURLs = ({ serverBasePath, images }) => {
    // Validate input parameters
    if (typeof serverBasePath !== 'string') {
        throw new Error(
            'Invalid serverBasePath: serverBasePath must be a string.'
        );
    }

    if (typeof images !== 'object' || images === null) {
        throw new Error('Invalid images: images must be an object.');
    }

    // If a server base path is provided, map local image paths to server URLs
    if (serverBasePath) {
        // Create a shallow copy of the images object and map each entry
        images = Object.fromEntries(
            // Iterate over each entry in the images object
            Object.entries(images).map(([localImagePath, image]) => {
                // Concatenate the server base path with the local image path and append the file extension
                if (
                    typeof localImagePath !== 'string' ||
                    typeof image !== 'string'
                ) {
                    throw new Error(
                        'Invalid image path: both localImagePath and image must be strings.'
                    );
                }
                return [`${serverBasePath}/${localImagePath}.webp`, image];
            })
        );
    } else {
        // If no server base path is provided, return a shallow copy of the images object
        images = { ...images };
    }

    // Return the object containing mapped server URLs for the images
    return images;
};
